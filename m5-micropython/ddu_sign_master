from m5stack import *
from m5ui import *
from uiflow import *
import time
import unit
import math

setScreenColor(0x111111)
neopixel = unit.get(unit.NEOPIXEL, unit.PORTA, 100)

# Globale variabler til LED-strippen og slangen
total_leds = 100
snake_length = 10

def hsv_to_rgb(h, s, v):
    """
    Konverterer HSV (h: 0-360, s: 0-1, v: 0-1) til en 24-bit RGB-værdi.
    """
    c = v * s
    x = c * (1 - abs(((h / 60) % 2) - 1))
    m = v - c
    if h < 60:
        r, g, b = c, x, 0
    elif h < 120:
        r, g, b = x, c, 0
    elif h < 180:
        r, g, b = 0, c, x
    elif h < 240:
        r, g, b = 0, x, c
    elif h < 300:
        r, g, b = x, 0, c
    else:
        r, g, b = c, 0, x
    r = int((r + m) * 255)
    g = int((g + m) * 255)
    b = int((b + m) * 255)
    return (r << 16) | (g << 8) | b

@timerSch.event('rainbowSnakeTimer')
def rainbowSnakeTimer():
    """
    Laver en regnbue-"slange" af ca. 'snake_length' LED'er, der løber henover striben.
    Hver LED i slangen får et lille hue-offset for at sikre en glidende farveovergang.
    """
    global total_leds, snake_length
    # Beregn snake-head position: bevæger sig 1 LED hvert 100 ms
    snake_head = (time.ticks_ms() // 100) % total_leds

    # Basis-hue, der ændrer sig kontinuerligt
    base_hue = (time.ticks_ms() // 10) % 360
    # Forskydning i hue for at skabe en glidende overgang i slangen
    hue_offset = 20.0 / snake_length

    # Ryd LED-strippen (sæt alle LED'er til sort)
    for i in range(total_leds):
        neopixel.setColor(i + 1, 0x000000)
    
    # Sæt farver for LED'erne i "slangen"
    for i in range(snake_length):
        pos = (snake_head - i) % total_leds  # Wrap-around hvis nødvendigt
        hue = (base_hue + i * hue_offset) % 360
        color = hsv_to_rgb(hue, 1.0, 1.0)
        neopixel.setColor(pos + 1, color)

# Opdaterer slange-effekten hvert 50 ms
timerSch.run('rainbowSnakeTimer', 50, 0x00)

while True:
    wait_ms(2)
